#include "pch.h"
#include "CppUnitTest.h"

#include <vector>

#include "../AesCrypto/Aes.h"

using namespace Microsoft::VisualStudio::CppUnitTestFramework;

namespace AesCryptoTests
{
	TEST_CLASS(AesCryptoTests)
	{
	public:
		
		TEST_METHOD( TestAes )
		{
            unsigned char enc_buf[128];
            unsigned char plaintext[] = {
                0x6b,0xc1,0xbe,0xe2,0x2e,0x40,0x9f,0x96,0xe9,0x3d,0x7e,0x11,0x73,0x93,0x17,0x2a,
                0xae,0x2d,0x8a,0x57,0x1e,0x03,0xac,0x9c,0x9e,0xb7,0x6f,0xac,0x45,0xaf,0x8e,0x51
            };
            
		    unsigned char ciphertext[] = {
                0x60,0x1e,0xc3,0x13,0x77,0x57,0x89,0xa5,0xb7,0xa7,0xf5,0x04,0xbb,0xf3,0xd2,0x28,
		        0xf4,0x43,0xe3,0xca,0x4d,0x62,0xb5,0x9a,0xca,0x84,0xe9,0x90,0xca,0xca,0xf5,0xc5
            };
            
		    unsigned char iv[] = {
                0xf0,0xf1,0xf2,0xf3,0xf4,0xf5,0xf6,0xf7,0xf8,0xf9,0xfa,0xfb,0xfc,0xfd,0xfe,0xff
            };
            
		    unsigned char key[] = {
                0x60,0x3d,0xeb,0x10,0x15,0xca,0x71,0xbe,0x2b,0x73,0xae,0xf0,0x85,0x7d,0x77,0x81,
		        0x1f,0x35,0x2c,0x07,0x3b,0x61,0x08,0xd7,0x2d,0x98,0x10,0xa3,0x09,0x14,0xdf,0xf4
            };

            aesEncrypt( plaintext, sizeof( plaintext ), iv, key, enc_buf );

            Assert::AreEqual( 0, memcmp( enc_buf, ciphertext, 32 ) );
		}

        /*TEST_METHOD( TestSample )
		{
            uint8_t input[] = {
                0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff
            };

            uint8_t key[] = {
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f
            };

            std::vector<uint8_t> roundKeys( 4 * (14 + 1) * sizeof( uint32_t ) );
            std::vector<uint8_t> output( sizeof( input ) );

            GenerateRoundKeys( key, reinterpret_cast<uint32_t *>(roundKeys.data()) );
            aesEncryptBlock( input, output.data(), reinterpret_cast<uint32_t *>(roundKeys.data()) );
        }*/
	};
}
